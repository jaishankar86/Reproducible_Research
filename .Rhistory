"kw_avg_avg","var1","global_rate_positive_words","avg_positive_polarity",
"Day_of_publishing_bin")]
View(train_1)
train_3 <- train_2[c(n_tokens_title,n_tokens_content,num_self_hrefs,kw_min_avg,kw_max_avg,
kw_avg_avg,var1,global_rate_positive_words,avg_positive_polarity,
Day_of_publishing_bin)]
summary(fit2)
names(train_1)
train_3 <- train_2[c(1,2,7,18,19,20,24,32,36,49)]
train_3 <- train_1[c(1,2,7,18,19,20,24,32,36,49)]
fit2 <- lm(shares~.,data=train_3)
train_3 <- train_1[c(1,2,7,18,19,20,24,32,36,49,47)]
fit2 <- lm(shares~.,data=train_3)
summary(fit2)
train_4 <- train_3[c(2,4:7)]
View(train_3)
train_4 <- train_3[c(2,4:7,11)]
fit2 <- lm(shares~.,data=train_4)
summary(fit2)
View(train_2)
fit_a <- rpart(shares~.,data=train_1)
library(party)
fit_a <- rpart(shares~.,data=train_1)
library(rpart)
fit_a <- rpart(shares~.,data=train_1)
summary(fit_a)
fit_a$ordered
fit_a <- rpart(shares~.,data=train_1,method= "anova")
fit_a
pred <- predict(fit_a,train_1)
actual <- train_1$shares
regr.eval(actual, pred)
library(DMwr)
library(DMwR)
install.packages("DMwR")
library(DMwR)
regr.eval(actual, pred)
plot(actual,pred)
plot(actual-pred)
train <- read.csv("C:/Invati/tiger_data/train_1GTUerD.csv",header = T, stringsAsFactors = FALSE)
train_1 <- na.omit(train)
train_1$Category_article_bin <- factor(train_1$Category_article,labels=1:length(unique(train_1$Category_article)))
train_1$Day_of_publishing_bin <- factor(train_1$Day_of_publishing,labels=1:length(unique(train_1$Day_of_publishing)))
View(train)
train_1 <- train_1[c(-1,-13,-26)]
for(i in colnames(train_1)){
train_1[i][train_1[i]>quantile(train_1[i,.95])] <- quantile(train_1[i,.95])
train_1[i][train_1[i]<quantile(train_1[i,.05])] <- quantile(train_1[i,.05])
}
pdf("C:/Invati/tiger_data/bp_after_OT")
for(i in c(1:49))
{
boxplot(train_1[i],main=paste("boxplot for",names(train_1[i])))
}
View(train_1)
View(train_1)
i
train_1[i]
str(train_1)
train_1[48:49] <- as.numeric(train_1[48:49])
train_1$Category_article_bin <- as.numeric(train_1$Category_article_bin)
train_1$Day_of_publishing_bin <- as.numeric(train_1$Day_of_publishing_bin)
for(i in colnames(train_1)){
train_1[i][train_1[i]>quantile(train_1[i,.95])] <- quantile(train_1[i,.95])
train_1[i][train_1[i]<quantile(train_1[i,.05])] <- quantile(train_1[i,.05])
}
train <- read.csv("C:/Invati/tiger_data/train_1GTUerD.csv",header = T, stringsAsFactors = FALSE)
train_1 <- na.omit(train)
train_1$Category_article_bin <- factor(train_1$Category_article,labels=1:length(unique(train_1$Category_article)))
train_1$Day_of_publishing_bin <- factor(train_1$Day_of_publishing,labels=1:length(unique(train_1$Day_of_publishing)))
train_1 <- train_1[c(-1,-13,-26)]
train_1$Category_article_bin <- as.numeric(train_1$Category_article_bin)
train_1$Day_of_publishing_bin <- as.numeric(train_1$Day_of_publishing_bin)
for(i in colnames(train_1)){
train_1[i][train_1[i]>quantile(train_1[i,.95])] <- quantile(train_1[i,.95])
train_1[i][train_1[i]<quantile(train_1[i,.05])] <- quantile(train_1[i,.05])
}
pdf("C:/Invati/tiger_data/bp_after_OT")
for(i in c(1:49))
{
boxplot(train_1[i],main=paste("boxplot for",names(train_1[i])))
}
i
View(train_1)
dev.off()
pdf("C:/Invati/tiger_data/bp_after_OT")
for(i in c(1:49))
{
boxplot(train_1[i],main=paste("boxplot for",names(train_1[i])))
}
dev.off()
View(train_1)
pdf("C:/Invati/tiger_data/bp_after_OT")
for(i in c(1:49))
{
boxplot(train_1[i],main=paste("boxplot for",names(train_1[i])))
}
dev.off()
train <- read.csv("C:/Invati/tiger_data/train_1GTUerD.csv",header = T, stringsAsFactors = FALSE)
train_1 <- na.omit(train)
train_1$Category_article_bin <- factor(train_1$Category_article,labels=1:length(unique(train_1$Category_article)))
train_1$Day_of_publishing_bin <- factor(train_1$Day_of_publishing,labels=1:length(unique(train_1$Day_of_publishing)))
train_1 <- train_1[c(-1,-13,-26)]
train_1$Category_article_bin <- as.numeric(train_1$Category_article_bin)
train_1$Day_of_publishing_bin <- as.numeric(train_1$Day_of_publishing_bin)
for(i in colnames(train_1)){
train_1[i][train_1[i]>quantile(train_1[i,.95])] <- quantile(train_1[i,.95])
train_1[i][train_1[i]<quantile(train_1[i,.05])] <- quantile(train_1[i,.05])
}
pdf("C:/Invati/tiger_data/bp_after_OT")
for(i in c(1:49))
{
boxplot(train_1[i],main=paste("boxplot for",names(train_1[i])))
}
dev.off()
for(i in colnames(train_1)){
train_1[i][train_1[i]>quantile(train_1[i,.95])] <- quantile(train_1[i,.95])
train_1[i][train_1[i]<quantile(train_1[i,.05])] <- quantile(train_1[i,.05])
}
pdf("C:/Invati/tiger_data/bp_after_OT")
for(i in c(1:49))
{
boxplot(train_1[i],main=paste("boxplot for",names(train_1[i])))
}
dev.off()
quantile(train_1[i,.95])
quantile(train_1[i],.95)
train_1[i]
names(train_1[i])
quantile(train_1[i],.95)
quantile(train_1[i],.95)]
quantile(train_1[i],.95)
i
for(i in colnames(train_1)){
train_1[i][train_1[i]>quantile(train_1[i],.95)] <- quantile(train_1[i],.95)
train_1[i][train_1[i]<quantile(train_1[i],.05)] <- quantile(train_1[i],.05)
}
for(i in 1:49){
train_1[i][train_1[i]>quantile(train_1[i],.95)] <- quantile(train_1[i],.95)
train_1[i][train_1[i]<quantile(train_1[i],.05)] <- quantile(train_1[i],.05)
}
i
quantile(train_1[i],.95)
for(i in c(1:49)){
train_1[i][train_1[i]>quantile(train_1[i],.95)] <- quantile(train_1[i],.95)
train_1[i][train_1[i]<quantile(train_1[i],.05)] <- quantile(train_1[i],.05)
}
View(train_1)
quantile(train_1[i],.95)
quantile(train_1$n_tokens_title,.95)
train_1[i][train_1[i]>quantile(train_1[i],.95)]
train_1[[i]][train_1[[i]]>quantile(train_1[[i]],.95)]
quantile(train_1[i],.95)
quantile(train_1[[i]],.95)
for(i in c(1:49)){
train_1[[i]][train_1[[i]]>quantile(train_1[[i]],.95)] <- quantile(train_1[[i]],.95)
train_1[[i]][train_1[[i]]<quantile(train_1[[i]],.05)] <- quantile(train_1[[i]],.05)
}
pdf("C:/Invati/tiger_data/bp_after_OT")
for(i in c(1:49))
{
boxplot(train_1[i],main=paste("boxplot for",names(train_1[i])))
}
dev.off()
fit_a <- rpart(shares~.,data=train_1,method= "anova")
library(rpart)
fit_a <- rpart(shares~.,data=train_1,method= "anova")
pred <- predict(fit_a,train_1)
actual <- train_1$shares
library(DMwR)
regr.eval(actual, pred)
for(i in c(1:49)){
train_1[[i]][train_1[[i]]>quantile(train_1[[i]],.95)] <- quantile(train_1[[i]],.95)
train_1[[i]][train_1[[i]]<quantile(train_1[[i]],.05)] <- quantile(train_1[[i]],.05)
}
pdf("C:/Invati/tiger_data/bp_after_OT")
for(i in c(1:49))
{
boxplot(train_1[i],main=paste("boxplot for",names(train_1[i])))
}
dev.off()
library(rpart)
fit_a <- rpart(shares~.,data=train_1,method= "anova")
pred <- predict(fit_a,train_1)
actual <- train_1$shares
library(DMwR)
regr.eval(actual, pred)
plot(actual - pred)
s <- actual - pred
plot(s)
train <- read.csv("C:/Invati/tiger_data/train_1GTUerD.csv",header = T, stringsAsFactors = FALSE)
train_1 <- na.omit(train)
train_1$Category_article_bin <- factor(train_1$Category_article,labels=1:length(unique(train_1$Category_article)))
train_1$Day_of_publishing_bin <- factor(train_1$Day_of_publishing,labels=1:length(unique(train_1$Day_of_publishing)))
train_1 <- train_1[c(-1,-13,-26)]
train_1$Category_article_bin <- as.numeric(train_1$Category_article_bin)
train_1$Day_of_publishing_bin <- as.numeric(train_1$Day_of_publishing_bin)
library(rpart)
fit_a <- rpart(shares~.,data=train_1,method= "anova")
pred <- predict(fit_a,train_1)
actual <- train_1$shares
library(DMwR)
regr.eval(actual, pred)
s <- actual - pred
plot(s)
train_1$pred <- pred
View(train_1)
describe(train_1$pred)
library(Hmisc)
describe(train_1$pred)
describe(train_1$shares)
train <- read.csv("C:/Invati/tiger_data/train_1GTUerD.csv",header = T, stringsAsFactors = FALSE)
train_1 <- na.omit(train)
train_1$Category_article_bin <- factor(train_1$Category_article,labels=1:length(unique(train_1$Category_article)))
train_1$Day_of_publishing_bin <- factor(train_1$Day_of_publishing,labels=1:length(unique(train_1$Day_of_publishing)))
train_1 <- train_1[c(-1,-13,-26)]
train_1$Category_article_bin <- as.numeric(train_1$Category_article_bin)
train_1$Day_of_publishing_bin <- as.numeric(train_1$Day_of_publishing_bin)
corrplot(train_1)
load("C:/Invati/tiger_data/Objects.RData")
load("C:/Invati/tiger_data/Objects.RData")
# xgboost parameters
param1 <- list(objective           = "reg:linear",
booster = "gbtree",    # evaluation metric
max_depth = 20,    # maximum depth of tree
eta = 0.4,    # step size shrinkage
subsample = 1,    # part of data instances to grow tree
colsample_bytree = 0.75,  # subsample ratio of columns when constructing each tree
min_child_weight = 40,
eval_metric = "rmse")
h<-sample(nrow(train),1500)
library(xgboost)
dval<-xgb.DMatrix(data=data.matrix(train[h,c(num,cat)]),label=(train$shares+1)[h])
dtrain<-xgb.DMatrix(data=data.matrix(train[h,c(num,cat)]),label=(train$shares+1)[h])
watchlist<-list(val=dval,train=dtrain)
xgb2 <- xgboost(   params              = param1,
data                = dtrain,
nrounds             = 1000, #300, #280, #125, #250, # changed from 300
verbose             = 1,
watchlist           = watchlist
)
param1 <- list(objective           = "reg:linear",
booster = "gbtree",    # evaluation metric
max_depth = 20,    # maximum depth of tree
eta = 0.4,    # step size shrinkage
subsample = 1,    # part of data instances to grow tree
colsample_bytree = 0.75,  # subsample ratio of columns when constructing each tree
min_child_weight = 40,
eval_metric = "rmse")
h<-sample(nrow(train),1500)
h<-sample(nrow(train),1800)
dval<-xgb.DMatrix(data=data.matrix(train[h,c(num,cat)]),label=(train$shares+1)[h])
dtrain<-xgb.DMatrix(data=data.matrix(train[-h,c(num,cat)]),label=(train$shares+1)[-h])
watchlist<-list(val=dval,train=dtrain)
xgb2 <- xgboost(   params              = param1,
data                = dtrain,
nrounds             = 1000, #300, #280, #125, #250, # changed from 300
verbose             = 1,
watchlist           = watchlist
)
xgb2 <- xgb.train(   params              = param1,
data                = dtrain,
nrounds             = 1000, #300, #280, #125, #250, # changed from 300
verbose             = 1,
watchlist           = watchlist
)
pred3 <- predict(xgb2, data.matrix(test[,c(num,cat)]))
head(pred1)
head(pred3)
pred1 <- predict(xgb1, data.matrix(test[,num]))
head(pred1)
pred3 <- predict(xgb2, data.matrix(test[,c(num,cat)]))
head(pred1)
head(pred3)
cc <- predict(xgb2, data.matrix(train[,c(num,cat)]))
cc1 <- predict(xgb1, data.matrix(train[,c(num,cat)]))
sum(abs(train$shares,cc))
sum(abs(train$shares-cc))
sum(abs(train$shares-cc1))
xgb2 <- xgb.train(   params              = param,
data                = dtrain,
nrounds             = 1000, #300, #280, #125, #250, # changed from 300
verbose             = 1,
watchlist           = watchlist
)
cc <- predict(xgb2, data.matrix(train[,c(num,cat)]))
head(cc)
head(cc1)
sum(abs(train$shares-cc))
sum(abs(train$shares-cc1))
submissin3 <- data.frame(id = test$id,shares = abs((cc+cc1)/2)
submissin3 <- data.frame(id = test$id,shares = abs((cc+cc1)/2))
cc <- predict(xgb2, data.matrix(test[,c(num,cat)]))
cc1 <- predict(xgb1, data.matrix(test[,c(num,cat)]))
submissin3 <- data.frame(id = test$id,shares = abs((cc+cc1)/2))
write.csv(submissin3,"Submission_3.csv",row.names = F)
param1 <- list(objective           = "reg:linear",
booster = "gbtree",    # evaluation metric
max_depth = 20,    # maximum depth of tree
eta = 0.4,    # step size shrinkage
subsample = 1,    # part of data instances to grow tree
colsample_bytree = 0.75,  # subsample ratio of columns when constructing each tree
min_child_weight = 40,
eval_metric = "rmse")
xgb3 <- xgb.train(   params              = param1,
data                = dtrain,
nrounds             = 1000, #300, #280, #125, #250, # changed from 300
verbose             = 1,
watchlist           = watchlist
)
cc2 <- predict(xgb3,data.matrix(test[,c(num,cat)]))
sum(abs(train$shares-cc2))
submissin4 <- data.frame(id = test$id,shares = abs((cc+cc2)/2))
write.csv(submissin4,"Submission_4.csv",row.names = F)
submissin5 <- data.frame(id = test$id,shares = abs((cc1+cc2)/2))
write.csv(submissin5,"Submission_5.csv",row.names = F)
param <- list(objective           = "reg:linear",
booster = "gbtree",    # evaluation metric
max_depth = 20,    # maximum depth of tree
eta = 0.2,    # step size shrinkage
subsample = 1,    # part of data instances to grow tree
colsample_bytree = 0.85,  # subsample ratio of columns when constructing each tree
min_child_weight = 40,
eval_metric = "rmse")
h<-sample(nrow(train),1500)
library(xgboost)
dval<-xgb.DMatrix(data=data.matrix(train[h,c(num,cat)]),label=(train$shares+1)[h])
dtrain<-xgb.DMatrix(data=data.matrix(train[-h,c(num,cat)]),label=(train$shares+1)[-h])
watchlist<-list(val=dval,train=dtrain)
xgb3 <- xgb.train(   params              = param,
data                = dtrain,
nrounds             = 1000, #300, #280, #125, #250, # changed from 300
verbose             = 1,
watchlist           = watchlist
)
cc2 <- predict(xgb3,data.matrix(test[,c(num,cat)]))
submissin6 <- data.frame(id = test$id,shares = abs((cc1+cc2)/2))
write.csv(submissin6,"Submission_5.csv",row.names = F)
submissin7 <- data.frame(id = test$id,shares = abs((cc+cc2)/2))
write.csv(submissin7,"Submission_7.csv",row.names = F)
load("C:/Invati/Miedensha/download/download/mean_biplot/.RData")
load("C:/Invati/Miedensha/download/download/mean_biplot_b1/.RData")
library(corrplot)
str(plantA)
plantA1 <- na.omit(plantA)
plantA_cor <- cor(plantA1[c(-29)])
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A")
abbreviate(colnames(plantA),method=c("both.sides"))
abbreviate(colnames(plantA),minlength = 10,method=c("both.sides"))
abbreviate(colnames(plantA),minlength = 10,method=c("left.kept"))
abbreviate(colnames(plantA),minlength = 20,method=c("left.kept"))
colnames(plantA1) <- abbreviate(colnames(plantA),minlength = 20,method=c("left.kept"))
plantA_cor <- cor(plantA1[c(-29)])
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A")
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A",cl.align.text = "c",cl.offset = 0.5)
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A",cl.align.text = "c",cl.offset = 0.3)
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A",cl.align.text = "c",cl.offset = 0.3)
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A",cl.align.text = "c",cl.offset = 0.3,pch=1)
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A",cl.align.text = "c",cl.offset = 0.3,pch=.5)
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A",cl.align.text = "c",cl.offset = 0.3,pch.cex=.5)
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A",cl.align.text = "c",cl.offset = 0.3,pch.cex=.3)
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A",cl.align.text = "c",cl.offset = 0.3,pch.cex=.3)
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A",cl.align.text = "c",cl.offset = 0.3,pch.cex=5)
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A",cl.align.text = "c",cl.offset = 0.3,cex=5)
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A",cl.align.text = "c",cl.offset = 0.3,pch.cex=5)
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A",cl.align.text = "c",cl.offset = 0.3,pch.cex=.1)
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A",cl.align.text = "c",cl.offset = 0.3,pch.cex=.001)
colnames(plantA1) <- c(1:29)
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A")
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A")
plantA_cor <- cor(plantA1[c(-29)])
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A")
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A",align.text = "c",cl.offset = 0.3,pch.cex=.001)
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A",align.text = "c",cl.offset = 0.3,cex=.001)
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A",align.text = "c",cl.offset = 0.3,pch=.001)
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A",tl.pos="n", cl.pos="n")
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A", cl.pos="n")
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A",tl.pos="n")
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A", cl.pos="n")
corrplot(plantA_cor, method = "circle",title = "Correlation Plot For Plant_A")
summary(df1)
load("C:/Invati/Miedensha/download/download/mean_biplot_b1/.RData")
plantB1 <- na.omit(plantB)
names(plantB)
colnames(plantB1) <- c(1:26)
plantB1 <- plantB1[c(3,5,16,17,18)]
pairs(Power_generation___B~.,data=plantB1,
main="Simple Scatterplot Matrix")
plantB1 <- na.omit(plantB)
plantB1 <- plantB1[c(3,5,16,17,18)]
pairs(Power_generation___B~.,data=plantB1,
main="Simple Scatterplot Matrix")
load("C:/Invati/Miedensha/download/download/mean_biplot_b1/.RData")
plot(plantB1$Power_generation___B,plantB1$Rotational_speed___B)
plot(plantB1$Power_generation___B,plantB1$Rotational_speed___B, xlab = "Power_Generation", ylab = "Roatational_Speed")
plot(plantB1$Power_generation___B,plantB1$Stator_temperature___B, xlab = "Power_Generation", ylab = "Stator_Temperature")
plot(plantB1$Power_generation___B,plantB1$Thrust_bearing_temperature___B, xlab = "Power_Generation", ylab = "Thrust_Bearing_Temperature")
plot(plantB1$Power_generation___B,plantB1$Wind_tunnel_outlet_temperature___B, xlab = "Power_Generation", ylab = "Thrust_Bearing_Temperature")
plot(plantB1$Power_generation___B,plantB1$Anti__direct_side_bearing_temperature___B, xlab = "Power_Generation", ylab = "Anti__direct_side_bearing_temperature___B")
plot(plantB1$Power_generation___B,plantB1$Anti__direct_side_bearing_temperature___B, xlab = "Power_Generation", ylab = "Anti_direct_side_bearing_temperature")
par(mfrow = 2,2)
par(mfrow=c(2,2))
plot(plantB1$Power_generation___B,plantB1$Stator_temperature___B, xlab = "Power_Generation", ylab = "Stator_Temperature")
plot(plantB1$Power_generation___B,plantB1$Thrust_bearing_temperature___B, xlab = "Power_Generation", ylab = "Thrust_Bearing_Temperature")
plot(plantB1$Power_generation___B,plantB1$Wind_tunnel_outlet_temperature___B, xlab = "Power_Generation", ylab = "Wind_tunnel_outlet_temperature")
plot(plantB1$Power_generation___B,plantB1$Anti__direct_side_bearing_temperature___B, xlab = "Power_Generation", ylab = "Anti_direct_side_bearing_temperature")
par(mfrow=c(2,2))
plot(plantB1$Power_generation___B,plantB1$Stator_temperature___B, xlab = "Pwr Gnrtn", ylab = "Stator_Temp",main = "Power Generation Vs Stator Temperature")
plot(plantB1$Power_generation___B,plantB1$Thrust_bearing_temperature___B, xlab = "Pwr Gnrtn", ylab = "Thrust_Brg_Temp",main = "Power Generation Vs Thrust Bearing Temperature")
plot(plantB1$Power_generation___B,plantB1$Wind_tunnel_outlet_temperature___B, xlab = "Pwr Gnrtn", ylab = "Wind_tunnel_out_temp",main = "Power Generation Vs Wind Tunnel Outlet Temperature")
plot(plantB1$Power_generation___B,plantB1$Anti__direct_side_bearing_temperature___B, xlab = "Pwr Gnrtn", ylab = "Anti_direct_side_brg_temp",main = "Power Generation Vs Anti Direct Side Bearing Temperature")
plot(plantB1$Power_generation___B,plantB1$Stator_temperature___B, xlab = "Pwr Gnrtn", ylab = "Stator_Temp",main = "Power Generation Vs Stator Temperature",cex=.5)
plot(plantB1$Power_generation___B,plantB1$Stator_temperature___B, xlab = "Pwr Gnrtn", ylab = "Stator_Temp",main = "Power Generation Vs Stator Temperature",main.cex=.5)
plot(plantB1$Power_generation___B,plantB1$Stator_temperature___B, xlab = "Pwr Gnrtn", ylab = "Stator_Temp",main = "Power Generation Vs Stator Temperature",cex.main=.5)
options(warn=-1)
par(mfrow=c(2,2))
plot(plantB1$Power_generation___B,plantB1$Stator_temperature___B, xlab = "Pwr Gnrtn", ylab = "Stator_Temp",main = "Power Generation Vs Stator Temperature",cex.main=.7)
plot(plantB1$Power_generation___B,plantB1$Thrust_bearing_temperature___B, xlab = "Pwr Gnrtn", ylab = "Thrust_Brg_Temp",main = "Power Generation Vs Thrust Bearing Temperature",cex.main=.7)
plot(plantB1$Power_generation___B,plantB1$Wind_tunnel_outlet_temperature___B, xlab = "Pwr Gnrtn", ylab = "Wind_tunnel_out_temp",main = "Power Generation Vs Wind Tunnel Outlet Temperature",cex.main=.7)
plot(plantB1$Power_generation___B,plantB1$Anti__direct_side_bearing_temperature___B, xlab = "Pwr Gnrtn", ylab = "Anti_direct_side_brg_temp",main = "Power Generation Vs Anti Direct Side Bearing Temperature",cex.main=.7)
par(mfrow=c(2,2))
plot(plantB1$Power_generation___B,plantB1$Stator_temperature___B, xlab = "Pwr Gnrtn", ylab = "Stator_Temp",main = "Power Generation Vs Stator Temperature",cex.main=.5)
plot(plantB1$Power_generation___B,plantB1$Thrust_bearing_temperature___B, xlab = "Pwr Gnrtn", ylab = "Thrust_Brg_Temp",main = "Power Generation Vs Thrust Bearing Temperature",cex.main=.5)
plot(plantB1$Power_generation___B,plantB1$Wind_tunnel_outlet_temperature___B, xlab = "Pwr Gnrtn", ylab = "Wind_tunnel_out_temp",main = "Power Generation Vs Wind Tunnel Outlet Temperature",cex.main=.5)
plot(plantB1$Power_generation___B,plantB1$Anti__direct_side_bearing_temperature___B, xlab = "Pwr Gnrtn", ylab = "Anti_direct_side_brg_temp",main = "Power Generation Vs Anti Direct Side Bearing Temperature",cex.main=.5)
library(ggplot2)
a <- c(plantA$Datetime,plantA$Power_generation___A,plantB$Power_generation___B)
a <- cbind(plantA$Datetime,plantA$Power_generation___A,plantB$Power_generation___B)
head(a)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
data(mtcars)
lm(mtcars$mpg~mtcars$wt)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x)
sd(x)
(8.58-9.31)/.7511325
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
?ppois()
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
setwd("C:/Users/JAI/Downloads/Cousera Data Science Specialization/5. Reproducible Research/week1//repdata-data-activity/")
read.csv("activity.csv", header= T)
data <- read.csv("activity.csv", header= T)
View(data)
setwd("C:/Users/JAI/Downloads/Cousera Data Science Specialization/5. Reproducible Research/week1//repdata-data-activity/")
data <- read.csv("activity.csv", header= T)
View(data)
steps_day <- tapply(data$steps, data$date, sum, na.rm=TRUE)
qplot(steps_day, xlab='Total steps per day', ylab='Frequency')
library("dplyr", lib.loc="C:/Program Files/R/R-3.1.2/library")
qplot(steps_day, xlab='Total steps per day', ylab='Frequency')
library("plyr", lib.loc="C:/Program Files/R/R-3.1.2/library")
qplot(steps_day, xlab='Total steps per day', ylab='Frequency')
?qplot
?qplot()
??qplot()
library("ggplot2", lib.loc="C:/Program Files/R/R-3.1.2/library")
qplot(steps_day, xlab='Total steps per day', ylab='Frequency')
stepsByDayMean <- mean(steps_day)
stepsByDayMedian <- median(steps_day)
#Loading and preprocessing the data
setwd("C:/Users/JAI/Downloads/Cousera Data Science Specialization/5. Reproducible Research/week1//repdata-data-activity/")
data <- read.csv("activity.csv", header= T)
#What is mean total number of steps taken per day?
#Calculate the total number of steps taken per day
steps_day <- tapply(data$steps, data$date, sum, na.rm=TRUE)
#Make a histogram of the total number of steps taken each day
qplot(steps_day, xlab='Total steps per day', ylab='Frequency')
#Calculate and report the mean and median of the total number of steps taken per day
stepsByDayMean <- mean(steps_day)
stepsByDayMedian <- median(steps_day)
#What is the average daily activity pattern?
averageStepsPerTimeBlock <- aggregate(x=list(meanSteps=data$steps),
by=list(interval=data$interval), FUN=mean, na.rm=TRUE)
#Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
ggplot(data=averageStepsPerTimeBlock, aes(x=interval, y=meanSteps)) +
geom_line() +
xlab("5-minute interval") +
ylab("average number of steps taken")
#Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
mostSteps <- which.max(averageStepsPerTimeBlock$meanSteps)
timeMostSteps <-  gsub("([0-9]{1,2})([0-9]{2})", "\\1:\\2", averageStepsPerTimeBlock[mostSteps,'interval'])
#Imputing missing values
#Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
numMissingValues <- length(which(is.na(data$steps)))
#Create a new dataset that is equal to the original dataset but with the missing data filled in.
dataImputed <- data
dataImputed$steps <- impute(data$steps, fun=mean)
#Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
stepsByDayImputed <- tapply(dataImputed$steps, dataImputed$date, sum)
#Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
qplot(stepsByDayImputed, xlab='Total steps per day (Imputed)', ylab='Frequency using binwith 500', binwidth=500)
stepsByDayMeanImputed <- mean(stepsByDayImputed)
stepsByDayMedianImputed <- median(stepsByDayImputed)
#Are there differences in activity patterns between weekdays and weekends?
#Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
#Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
dataImputed$dateType <-  ifelse(as.POSIXlt(dataImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
averageddataImputed <- aggregate(steps ~ interval + dateType, data=dataImputed, mean)
ggplot(averageddataImputed, aes(interval, steps)) +
geom_line() +
facet_grid(dateType ~ .) +
xlab("5-minute interval") +
ylab("avarage number of steps")
